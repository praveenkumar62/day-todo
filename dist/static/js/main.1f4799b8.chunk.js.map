{"version":3,"sources":["Component/AddTodo.jsx","App.js","serviceWorker.js","index.js"],"names":["AddTodo","state","desc","author","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","props","receiveData","className","type","id","placeholder","onChange","this","onClick","Component","App","list","decoration","todocount","addTodo","items","Math","random","lists","callStrike","data","delData","filter","item","stateData","datalist","map","key","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QA2CeA,G,iNAtCXC,MAAO,CACHC,KAAM,GACNC,OAAQ,I,EAGZC,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAIlCC,aAAe,SAACL,GACZA,EAAEM,iBACF,EAAKC,MAAMC,YAAY,EAAKZ,OAC5B,EAAKK,SAAS,CACVJ,KAAM,GACNC,OAAQ,M,wEAMZ,OACI,yBAAKW,UAAU,iBACX,8BACI,yBAAKA,UAAU,cACX,2BAAOC,KAAK,OAAOP,KAAK,OAAOQ,GAAG,WAAWF,UAAU,eAAeG,YAAY,oCAAoCC,SAAUC,KAAKf,aAAcK,MAAOU,KAAKlB,MAAMC,QAEzK,yBAAKY,UAAU,cACX,2BAAOC,KAAK,OAAOP,KAAK,SAASQ,GAAG,aAAaF,UAAU,eAAeG,YAAY,wBAAyBC,SAAUC,KAAKf,aAAaK,MAAOU,KAAKlB,MAAME,UAEjK,4BAAQY,KAAK,SAASD,UAAU,cAAcM,QAASD,KAAKT,cAA5D,a,GAhCEW,cC2EPC,G,iNAzEbrB,MAAQ,CACNsB,KAAM,CACJ,CAACP,GAAI,KAAMd,KAAM,yDAA0DC,OAAQ,UAAWqB,WAAY,SAE5GC,UAAW,M,EAGbC,QAAU,SAACC,GACTA,EAAMX,GAAmB,IAAdY,KAAKC,SAChBF,EAAMH,WAAa,OACnB,IAAMM,EAAK,sBAAO,EAAK7B,MAAMsB,MAAlB,CAAuBI,IAClC,EAAKrB,SAAS,CACZiB,KAAMO,K,EAIVC,WAAa,SAACC,GACZ,IAAIC,EAAU,EAAKhC,MAAMsB,KAAKW,QAAO,SAAAC,GACnC,OAAOA,EAAKnB,KAAOgB,KAErB,EAAK1B,SAAS,CACZiB,KAAMU,K,wEAIA,IAAD,OACDG,EAAYjB,KAAKlB,MAAMsB,KAEzBS,EAAO,EACLK,EAAWD,EAAUE,KAAI,SAAAH,GAG7B,OADAA,EAAKnB,GAAIgB,IAEP,yBAAKlB,UAAU,qBAAqByB,IAAKJ,EAAKnB,IAE5C,uBAAGF,UAAU,gBAAgBM,QAAS,WAAO,EAAKW,WAAWI,EAAKnB,OAClE,yBAAKF,UAAU,WACb,uBAAGA,UAAU,sBAAsBqB,EAAKjC,MACxC,uBAAGY,UAAU,mBAAb,YAAwC,0BAAMA,UAAU,gBAAgBqB,EAAKhC,cAOrF,OACE,yBAAKW,UAAU,aACb,wBAAIA,UAAU,eAAc,uBAAGA,UAAU,eAAzC,cAEA,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,aACZuB,GAGH,yBAAKvB,UAAU,WACb,wBAAIA,UAAU,YACd,kBAAC,EAAD,CAASD,YAAaM,KAAKO,WAG7B,2BAAIP,KAAKlB,MAAMwB,YAGjB,uBAAGX,UAAU,aACX,uBAAG0B,KAAK,qCAAoC,uBAAG1B,UAAU,kBACzD,uBAAG0B,KAAK,uCAAsC,uBAAG1B,UAAU,6BAC3D,uBAAG0B,KAAK,uDAAsD,uBAAG1B,UAAU,4BAE7E,uBAAGA,UAAU,cAAb,gBAAuC,kDAAvC,IAAqE,uBAAGA,UAAU,oB,GApExEO,cCOEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1f4799b8.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport '../css/Addtodocss.css'\n\n\nclass AddTodo extends Component {\n    state ={\n        desc: '',\n        author: ''\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.receiveData(this.state);\n        this.setState({\n            desc: '',\n            author: ''\n        })\n    }\n\n    render() {\n        \n        return(\n            <div className=\"container-add\">\n                <form>\n                    <div className=\"form-group\">\n                        <input type=\"text\" name=\"desc\" id=\"add-desc\" className=\"form-control\" placeholder=\"What you want to achieve today...\" onChange={this.handleChange} value={this.state.desc} />\n                    </div>\n                    <div className=\"form-group\">\n                        <input type=\"text\" name=\"author\" id=\"add-author\" className=\"form-control\" placeholder=\"Who believes in you ?\"  onChange={this.handleChange}value={this.state.author} />\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-add\" onClick={this.handleSubmit}>Add</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddTodo\n","import React, {Component} from 'react';\n\nimport AddTodo from './Component/AddTodo'\nimport './css/App.css'\n\nclass App extends Component {\n  state = {\n    list: [\n      {id: null, desc: 'Never forgot! without Struggle, there is no progress..', author: 'Praveen', decoration: 'none'}\n    ],\n    todocount: null\n  }\n\n  addTodo = (items) => {\n    items.id = Math.random()*100;\n    items.decoration = 'none';\n    const lists = [...this.state.list,items];\n    this.setState({\n      list: lists\n    })\n  }\n\n  callStrike = (data) => {\n    let delData = this.state.list.filter(item => {\n      return item.id !== data\n    }) \n    this.setState({\n      list: delData\n    })\n  }\n\n  render() {\n    const stateData = this.state.list;\n\n    let data = 0;\n    const datalist = stateData.map(item => {\n\n      item.id= data++;\n      return(\n        <div className=\"container-datalist\" key={item.id}>\n          {/* <p className=\"description center\" style={{textDecoration: this.state.list[item.id].decoration}} onClick={() => {this.callStrike(item.id)}}>{item.desc}</p> */}\n          <i className=\"fa fa-trash-o\" onClick={() => {this.callStrike(item.id)}}></i>\n          <div className=\"listing\">\n            <p className=\"description center\">{item.desc}</p>\n            <p className=\"assigner center\">Given by <span className=\"sub-assigner\">{item.author}</span></p>\n          </div>\n        </div>\n      )\n    });\n\n    \n    return (\n      <div className=\"container\">\n        <h1 className=\"center head\"><i className=\"fa fa-bolt\"></i> Day to do</h1>\n\n        <div className=\"content-list\">\n          <div className=\"data-list\">\n            {datalist}\n          </div>\n\n          <div className=\"add-new\">\n            <hr className=\"divider\"/>\n            <AddTodo receiveData={this.addTodo} />\n          </div>\n\n          <p>{this.state.todocount}</p>\n        </div>\n\n        <p className=\"dev-links\">\n          <a href=\"https://github.com/praveenkumar62\"><i className=\"fa fa-github\"></i></a>\n          <a href=\"http://facebook.com/praveen.cruzerz\"><i className=\"fa fa-facebook-official\"></i></a>\n          <a href=\"https://www.linkedin.com/in/praveen-kumar-309334159\"><i className=\"fa fa-linkedin-square\"></i></a>\n        </p>\n        <p className=\"dev-author\">Developed by <span>Praveen Cruzerz </span> <i className=\"fa fa-paw\"></i></p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}